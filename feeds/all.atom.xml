<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Saul Howard</title><link href="https://saulhoward.com/" rel="alternate"></link><link href="https://saulhoward.com/feeds/all.atom.xml" rel="self"></link><id>https://saulhoward.com/</id><updated>2023-08-29T00:00:00+01:00</updated><entry><title>SEO at the end of days</title><link href="https://saulhoward.com/seo-at-the-end-of-days" rel="alternate"></link><published>2023-08-29T00:00:00+01:00</published><updated>2023-08-29T00:00:00+01:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2023-08-29:/seo-at-the-end-of-days</id><summary type="html">&lt;p&gt;Google’s announced a GPT-4 killer, Gemini, for release by December. There’s no question that OpenAI have a massive lead, but from the outside, it doesn’t look unassailable. LLMs may have presented Google with the first real threat to their search business.&lt;/p&gt;
&lt;p&gt;LLMs hint at a new interface …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Google’s announced a GPT-4 killer, Gemini, for release by December. There’s no question that OpenAI have a massive lead, but from the outside, it doesn’t look unassailable. LLMs may have presented Google with the first real threat to their search business.&lt;/p&gt;
&lt;p&gt;LLMs hint at a new interface to computing. Microsoft’s strength isn’t interfaces, but sales. They can add LLM features to their software as customers need them. Apple can fall back on their hardware — and may see an increasing demand in consumer compute even as they slowly come around to updating iOS. But Google is only an interface. A single UI paradigm — search. They’ll need to move fast.&lt;/p&gt;
&lt;p&gt;I was talking SEO today, and the paradigm already feels outdated. People out there still discovering software through search engines like boomers with cable subscriptions.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>LLMs are complementary</title><link href="https://saulhoward.com/llms-are-complementary" rel="alternate"></link><published>2023-08-27T00:00:00+01:00</published><updated>2023-08-27T00:00:00+01:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2023-08-27:/llms-are-complementary</id><summary type="html">&lt;p&gt;LLMs (and generative AI generally) have an important feature: broad adoption of LLMs doesn’t require a change in consumer behaviour. LLMs are a complementary technology. We can deploy them right now to the cloud, to people’s smartphones and into enterprise software stacks.&lt;/p&gt;
&lt;p&gt;The iPhone’s success fostered a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;LLMs (and generative AI generally) have an important feature: broad adoption of LLMs doesn’t require a change in consumer behaviour. LLMs are a complementary technology. We can deploy them right now to the cloud, to people’s smartphones and into enterprise software stacks.&lt;/p&gt;
&lt;p&gt;The iPhone’s success fostered a narrative: that swift widespread change of consumer behaviour would be inevitable if the promise was there. But in reality, the unprecedented rise of mobile was overdetermined: the hardware was finally good enough (after decades of development) at the same time that the internet was finally changing consumer behaviour (after many false starts).&lt;/p&gt;
&lt;p&gt;Crypto and VR proponents have been selling them as a wave of technology about to break over our heads. But adoption in their current forms requires consumers to adopt new behaviours — buying (and using) costly barely-good-enough headsets, or changing their financial arrangements. I don’t doubt that we’ll see these technologies changing people’s lives in the future, but it won’t happen until the transition becomes easier for consumers to swallow. Making Crypto and VR not worth betting your balance sheet on.&lt;/p&gt;
&lt;p&gt;LLMs are different. LLM-powered services can sit alongside all existing software stacks, seamlessly providing functionality that wasn’t possible before. Consumers continue using their cloud-backed web and mobile apps and as far as the customer is concerned, their software got better without them having to &lt;em&gt;do&lt;/em&gt; anything.&lt;/p&gt;
&lt;p&gt;In this way, LLMs are more like the move to cloud. Cloud-powered features first showed up as options within our traditional desktop apps. “Share” or “Save to Cloud” buttons (with the floppy disk icon, naturally). Users didn’t need to know what it all meant, they could just opt-in to the new functionality alongside their existing workflows. Eventually, consumer’s came to intuit the new model, and apps changed, but it was a gradual process.&lt;/p&gt;
&lt;p&gt;Each technology has its own path to adoption. Growth of LLM-powered services will be smoother than cloud, as it doesn’t need big-bang digital transformations. It’s possible to re-write individual functions within an existing system to take advantage of LLMs. The tech is complementary to our current cloud, web and mobile platforms.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Where’s the web 2023</title><link href="https://saulhoward.com/web-development-2023" rel="alternate"></link><published>2023-08-26T00:00:00+01:00</published><updated>2023-08-26T00:00:00+01:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2023-08-26:/web-development-2023</id><summary type="html">&lt;p&gt;I tried out a few web frameworks and libraries recently. My thoughts:&lt;/p&gt;
&lt;h4&gt;Vite&lt;/h4&gt;
&lt;p&gt;I needed to upgrade some old React apps. It turned out they killed &lt;code&gt;create-react-app&lt;/code&gt;, and it seems like Vite is the go-to “just a React app” framework.&lt;/p&gt;
&lt;p&gt;Vite made the refactor painless. I think the only incompatible …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I tried out a few web frameworks and libraries recently. My thoughts:&lt;/p&gt;
&lt;h4&gt;Vite&lt;/h4&gt;
&lt;p&gt;I needed to upgrade some old React apps. It turned out they killed &lt;code&gt;create-react-app&lt;/code&gt;, and it seems like Vite is the go-to “just a React app” framework.&lt;/p&gt;
&lt;p&gt;Vite made the refactor painless. I think the only incompatible thing was a new format for env vars. Other than that, it kept out of the way. Recommended.&lt;/p&gt;
&lt;h4&gt;Remix&lt;/h4&gt;
&lt;p&gt;I wanted a new app that would deploy to Cloudflare Pages/Workers. The worker runs an edge endpoint proxying to a GCP Python service for the heavy lifting.&lt;/p&gt;
&lt;p&gt;Remix was impressive. It has a nice balance of web fundamentals and React. I’m not so sure about the push away from React with tech like &lt;code&gt;htmx&lt;/code&gt;. I like React! I see their point — React apps are in some ways ephemeral, it’s diverging from the web and the ecosystem is chaotic. But for quick development in the real world, it works. I’d choose Remix over NextJS. Remix feels lighter, with less custom magic.&lt;/p&gt;
&lt;h4&gt;Astro&lt;/h4&gt;
&lt;p&gt;This one was cool. Astro has a great set of features for a static site generator that you can integrate into the rest of your stack with MDX and React, while keeping all the posts in Markdown.&lt;/p&gt;
&lt;p&gt;I could share React components from the main webapp for the layout and added endpoints to the Astro app to serve the Markdown content to the other services.&lt;/p&gt;
&lt;h4&gt;Bun&lt;/h4&gt;
&lt;p&gt;I want to love Bun. JavaScript/TypeScript/NodeJS is a mess, and one of these attempts to replace the toolchain in one blow has to work.&lt;/p&gt;
&lt;p&gt;I found myself writing a NodeJS service, so I set it up with Bun, and it was great — until I tried to pull in the SDK libs I needed to use. It turns out the NodeJS compatibility isn’t there yet.&lt;/p&gt;
&lt;p&gt;Usually the only time I’m writing NodeJS is because of a specific library I want to use. Bun is great for writing dependency-free services, but if the service is dependency-free why would I use TypeScript? I understand they are aiming for 100% compatibility, and I hope they get there.&lt;/p&gt;</content><category term="misc"></category></entry></feed>