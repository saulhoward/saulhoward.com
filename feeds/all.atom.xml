<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Saul Howard</title><link href="https://saulhoward.com/" rel="alternate"></link><link href="https://saulhoward.com/feeds/all.atom.xml" rel="self"></link><id>https://saulhoward.com/</id><updated>2024-03-18T00:00:00+00:00</updated><entry><title>Anatomy of a Fall</title><link href="https://saulhoward.com/anatomy-of-a-fall" rel="alternate"></link><published>2024-03-18T00:00:00+00:00</published><updated>2024-03-18T00:00:00+00:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2024-03-18:/anatomy-of-a-fall</id><summary type="html">&lt;p&gt;Over the weekend, I saw the movie Anatomy of a Fall. It was fascinating to get a look at the French justice system. Common Law justice systems seem to be highly overrepresented in film. I'm not sure whether this is because the British and Americans have a particular liking for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the weekend, I saw the movie Anatomy of a Fall. It was fascinating to get a look at the French justice system. Common Law justice systems seem to be highly overrepresented in film. I'm not sure whether this is because the British and Americans have a particular liking for courtroom drama, or I'm just not watching the right foreign movies.&lt;/p&gt;
&lt;p&gt;The question at the heart of the movie was, did Sandra kill her husband? You might think this is the model:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Sandra&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;strong&gt;Sandra&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Kill Samuel&lt;/td&gt;
&lt;td style="text-align: center;"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;However, this isn't quite right, as the Option "Kill Samuel" doesn't refer to a future possibility. Rather, the drama in the film revolves around whether Sandra will be convicted for murder:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Sandra&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Prosecutor&lt;/th&gt;
&lt;th&gt;&lt;em&gt;dilemmas&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;strong&gt;Court&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Convict Sandra&lt;/td&gt;
&lt;td style="text-align: center;"&gt;⨉&lt;/td&gt;
&lt;td style="text-align: center;"&gt;✓&lt;/td&gt;
&lt;td&gt;Sandra, Prosecutor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Court's position is of course unstated. This means that Sandra (and by extension her Defence) and the Prosector both have persuasion dilemmas with respect to the Court. They are compelled to persuade the Court to take their position.&lt;/p&gt;
&lt;p&gt;Much of the drama in the film comes from how powerless Sandra is to influence events. She provides compelling testimony, but so does the Prosecutor. In the end, it comes down to her son Daniel's testimony, and whether he will take her side.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Sandra&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Prosecutor&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Daniel&lt;/th&gt;
&lt;th&gt;&lt;em&gt;dilemmas&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;strong&gt;Court&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Convict Sandra&lt;/td&gt;
&lt;td style="text-align: center;"&gt;⨉&lt;/td&gt;
&lt;td style="text-align: center;"&gt;✓&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-&lt;/td&gt;
&lt;td&gt;Sandra, Prosecutor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;strong&gt;Daniel&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Testify against Sandra&lt;/td&gt;
&lt;td style="text-align: center;"&gt;⨉&lt;/td&gt;
&lt;td style="text-align: center;"&gt;✓&lt;/td&gt;
&lt;td style="text-align: center;"&gt;-&lt;/td&gt;
&lt;td&gt;Sandra, Prosecutor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This gives Sandra and the Prosecutor persuasion dilemmas with respect to Daniel. Sandra in particular is compelled to persuade him to reject the idea of testifying against her. This is fraught, as if Daniel takes his Mother's side, then it means accepting the idea that his father took his own life. For much of the film, Daniel is clearly undecided as to whether he believes his Mother (represented by the -). The film's climax comes when Daniel makes his decision over this option. Although the film does not take a side, ultimately it seems that Daniel persuades himself of his Mother's innocence.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Actually, when we lack an element to judge something, and the lack is unbearable, all we can do is decide. You see? To overcome doubt, sometimes we have to… decide to sway one way rather than the other. Since you need to believe one thing but have two choices, you must choose.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Sandra&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Prosecutor&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Daniel&lt;/th&gt;
&lt;th&gt;&lt;em&gt;dilemmas&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;strong&gt;Court&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Convict Sandra&lt;/td&gt;
&lt;td style="text-align: center;"&gt;⨉&lt;/td&gt;
&lt;td style="text-align: center;"&gt;✓&lt;/td&gt;
&lt;td style="text-align: center;"&gt;⨉&lt;/td&gt;
&lt;td&gt;Sandra, Prosecutor, Daniel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;&lt;strong&gt;Daniel&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Testify against Sandra&lt;/td&gt;
&lt;td style="text-align: center;"&gt;⨉&lt;/td&gt;
&lt;td style="text-align: center;"&gt;✓&lt;/td&gt;
&lt;td style="text-align: center;"&gt;⨉&lt;/td&gt;
&lt;td&gt;Sandra, Prosecutor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="dailydrama"></category></entry><entry><title>Dramatic interfaces</title><link href="https://saulhoward.com/dramatic-interfaces" rel="alternate"></link><published>2024-01-04T00:00:00+00:00</published><updated>2024-01-04T00:00:00+00:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2024-01-04:/dramatic-interfaces</id><summary type="html">&lt;p&gt;In their working lives, most people don’t make decisions in complex situations of conflict and cooperation. Most companies instinctively, or intentionally, steer away from situations of dramatic conflict. Business concerns itself with win-win situations: I sell, you buy.&lt;/p&gt;
&lt;p&gt;Many roles do confront dramatic conflict. If you work in government …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In their working lives, most people don’t make decisions in complex situations of conflict and cooperation. Most companies instinctively, or intentionally, steer away from situations of dramatic conflict. Business concerns itself with win-win situations: I sell, you buy.&lt;/p&gt;
&lt;p&gt;Many roles do confront dramatic conflict. If you work in government, the military, healthcare, education, policing, then conflict is inherent. You are used to making decisions with unreliable information, with questionable actors and uncertain outcomes.&lt;/p&gt;
&lt;p&gt;Could the corporate world do more in this area — is it possible to have a dramatic relationship with your customers, where risk, deception and cooperation are all possible outcomes? I believe the answer is yes — drama is necessary if we want to take advantage of LLM tech.&lt;/p&gt;
&lt;p&gt;Software interfaces are moving beyond the transactional - embodied in the push-button GUIs of every app which is itself a direct inheritance from the first mechanical machines.&lt;/p&gt;
&lt;p&gt;LLM tech gives us a possibility of creating new interfaces that accept, and work within, the dramatic possibilities of language. We can build software that forms goals, reasons, arguments. It can be in cooperation or conflict with its users.  Thinking about software in these terms is essential as we start to build LLM-powered “agents”. Dramatic intelligence is needed where we don’t expect to program every step of the software’s lifetime. Finally, as no incumbent company will allow themselves this kind of relationship with their customer, it presents a huge opportunity for a new kind of LLM-native enterprise.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Service politics</title><link href="https://saulhoward.com/service-politics" rel="alternate"></link><published>2023-08-31T00:00:00+01:00</published><updated>2023-08-31T00:00:00+01:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2023-08-31:/service-politics</id><summary type="html">&lt;p&gt;Microservice architectures are a solution to scaling systems. Startups who start with a micro service architecture before they have scaling problems, sometimes before they even launch, attract ridicule.&lt;/p&gt;
&lt;p&gt;But microservices are also a solution to an engineering management problem. Startup codebases are usually a mess. Proof of concepts, abandoned features …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Microservice architectures are a solution to scaling systems. Startups who start with a micro service architecture before they have scaling problems, sometimes before they even launch, attract ridicule.&lt;/p&gt;
&lt;p&gt;But microservices are also a solution to an engineering management problem. Startup codebases are usually a mess. Proof of concepts, abandoned features, quick hacks are what it takes to find the product.&lt;/p&gt;
&lt;p&gt;Developers keep returning to service architectures because the separation of concerns enforced by the network makes it easier to maintain the codebase, onboard new developers and adopt and abandon features. Maybe your startup has a loyal team of focused developers, and you can do all of that within a monolith. But many don’t. In &lt;a href="https://gist.github.com/chitchcock/1281611"&gt;Yegge’s Platform Rant&lt;/a&gt;, he showed how service contracts are necessary for managing multiple engineering teams, but individual developers can benefit from them too.&lt;/p&gt;
&lt;p&gt;Serverless functions, LLM-scaffolding, cloud IDEs and bounties for features are all on the rise. Increasingly, systems are built from loose federations of distributed functionality. Like all engineering solutions, it’s a tradeoff. Abstracting problems at the network layer gives you network problems. But it can solve for spaghetti-monoliths.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>SEO at the end of days</title><link href="https://saulhoward.com/seo-at-the-end-of-days" rel="alternate"></link><published>2023-08-29T00:00:00+01:00</published><updated>2023-08-29T00:00:00+01:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2023-08-29:/seo-at-the-end-of-days</id><summary type="html">&lt;p&gt;Google’s announced a GPT-4 killer, Gemini, for release by December. There’s no question that OpenAI have a massive lead, but from the outside, it doesn’t look unassailable. LLMs may have presented Google with the first real threat to their search business.&lt;/p&gt;
&lt;p&gt;LLMs hint at a new interface …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Google’s announced a GPT-4 killer, Gemini, for release by December. There’s no question that OpenAI have a massive lead, but from the outside, it doesn’t look unassailable. LLMs may have presented Google with the first real threat to their search business.&lt;/p&gt;
&lt;p&gt;LLMs hint at a new interface to computing. Microsoft’s strength isn’t interfaces, but sales. They can add LLM features to their software as customers need them. Apple can fall back on their hardware — and may see an increasing demand in consumer compute even as they slowly come around to updating iOS. But Google is only an interface. A single UI paradigm — search. They’ll need to move fast.&lt;/p&gt;
&lt;p&gt;I was talking SEO today, and the paradigm already feels outdated. People out there still discovering software through search engines like boomers with cable subscriptions.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>LLMs are complementary</title><link href="https://saulhoward.com/llms-are-complementary" rel="alternate"></link><published>2023-08-27T00:00:00+01:00</published><updated>2023-08-27T00:00:00+01:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2023-08-27:/llms-are-complementary</id><summary type="html">&lt;p&gt;LLMs (and generative AI generally) have an important feature: broad adoption of LLMs doesn’t require a change in consumer behaviour. LLMs are a complementary technology. We can deploy them right now to the cloud, to people’s smartphones and into enterprise software stacks.&lt;/p&gt;
&lt;p&gt;The iPhone’s success fostered a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;LLMs (and generative AI generally) have an important feature: broad adoption of LLMs doesn’t require a change in consumer behaviour. LLMs are a complementary technology. We can deploy them right now to the cloud, to people’s smartphones and into enterprise software stacks.&lt;/p&gt;
&lt;p&gt;The iPhone’s success fostered a narrative: that swift widespread change of consumer behaviour would be inevitable if the promise was there. But in reality, the unprecedented rise of mobile was overdetermined: the hardware was finally good enough (after decades of development) at the same time that the internet was finally changing consumer behaviour (after many false starts).&lt;/p&gt;
&lt;p&gt;Crypto and VR proponents have been selling them as a wave of technology about to break over our heads. But adoption in their current forms requires consumers to adopt new behaviours — buying (and using) costly barely-good-enough headsets, or changing their financial arrangements. I don’t doubt that we’ll see these technologies changing people’s lives in the future, but it won’t happen until the transition becomes easier for consumers to swallow. Making Crypto and VR not worth betting your balance sheet on.&lt;/p&gt;
&lt;p&gt;LLMs are different. LLM-powered services can sit alongside all existing software stacks, seamlessly providing functionality that wasn’t possible before. Consumers continue using their cloud-backed web and mobile apps and as far as the customer is concerned, their software got better without them having to &lt;em&gt;do&lt;/em&gt; anything.&lt;/p&gt;
&lt;p&gt;In this way, LLMs are more like the move to cloud. Cloud-powered features first showed up as options within our traditional desktop apps. “Share” or “Save to Cloud” buttons (with the floppy disk icon, naturally). Users didn’t need to know what it all meant, they could just opt-in to the new functionality alongside their existing workflows. Eventually, consumer’s came to intuit the new model, and apps changed, but it was a gradual process.&lt;/p&gt;
&lt;p&gt;Each technology has its own path to adoption. Growth of LLM-powered services will be smoother than cloud, as it doesn’t need big-bang digital transformations. It’s possible to re-write individual functions within an existing system to take advantage of LLMs. The tech is complementary to our current cloud, web and mobile platforms.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Where’s the web 2023</title><link href="https://saulhoward.com/web-development-2023" rel="alternate"></link><published>2023-08-26T00:00:00+01:00</published><updated>2023-08-26T00:00:00+01:00</updated><author><name>Saul Howard</name></author><id>tag:saulhoward.com,2023-08-26:/web-development-2023</id><summary type="html">&lt;p&gt;I tried out a few web frameworks and libraries recently. My thoughts:&lt;/p&gt;
&lt;h4&gt;Vite&lt;/h4&gt;
&lt;p&gt;I needed to upgrade some old React apps. It turned out they killed &lt;code&gt;create-react-app&lt;/code&gt;, and it seems like Vite is the go-to “just a React app” framework.&lt;/p&gt;
&lt;p&gt;Vite made the refactor painless. I think the only incompatible …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I tried out a few web frameworks and libraries recently. My thoughts:&lt;/p&gt;
&lt;h4&gt;Vite&lt;/h4&gt;
&lt;p&gt;I needed to upgrade some old React apps. It turned out they killed &lt;code&gt;create-react-app&lt;/code&gt;, and it seems like Vite is the go-to “just a React app” framework.&lt;/p&gt;
&lt;p&gt;Vite made the refactor painless. I think the only incompatible thing was a new format for env vars. Other than that, it kept out of the way. Recommended.&lt;/p&gt;
&lt;h4&gt;Remix&lt;/h4&gt;
&lt;p&gt;I wanted a new app that would deploy to Cloudflare Pages/Workers. The worker runs an edge endpoint proxying to a GCP Python service for the heavy lifting.&lt;/p&gt;
&lt;p&gt;Remix was impressive. It has a nice balance of web fundamentals and React. I’m not so sure about the push away from React with tech like &lt;code&gt;htmx&lt;/code&gt;. I like React! I see their point — React apps are in some ways ephemeral, it’s diverging from the web and the ecosystem is chaotic. But for quick development in the real world, it works. I’d choose Remix over NextJS. Remix feels lighter, with less custom magic.&lt;/p&gt;
&lt;h4&gt;Astro&lt;/h4&gt;
&lt;p&gt;This one was cool. Astro has a great set of features for a static site generator that you can integrate into the rest of your stack with MDX and React, while keeping all the posts in Markdown.&lt;/p&gt;
&lt;p&gt;I could share React components from the main webapp for the layout and added endpoints to the Astro app to serve the Markdown content to the other services.&lt;/p&gt;
&lt;h4&gt;Bun&lt;/h4&gt;
&lt;p&gt;I want to love Bun. JavaScript/TypeScript/NodeJS is a mess, and one of these attempts to replace the toolchain in one blow has to work.&lt;/p&gt;
&lt;p&gt;I found myself writing a NodeJS service, so I set it up with Bun, and it was great — until I tried to pull in the SDK libs I needed to use. It turns out the NodeJS compatibility isn’t there yet.&lt;/p&gt;
&lt;p&gt;Usually the only time I’m writing NodeJS is because of a specific library I want to use. Bun is great for writing dependency-free services, but if the service is dependency-free why would I use TypeScript? I understand they are aiming for 100% compatibility, and I hope they get there.&lt;/p&gt;</content><category term="misc"></category></entry></feed>